//###############################################################
// Author: Reto Scheiwiller, 2018
// Licence: MIT License
// https://github.com/xresch/PENG_Toolbox
// 
// custom.bhd
// -----------
// This file contains common useful functions for silk performer
// scripts.
//
//###############################################################



use "Kernel.bdh"
use "BrowserAPI.bdh"


const
  VERBOSE := TRUE;
  DEV_MODE := FALSE; 

var
  GLOBAL_USER_FILE_HANDLE   : number;
  GLOBAL_USER_ID            : string;
  GLOBAL_USER_PW            : string;
  GLOBAL_ZR_ROW_HANDLE      : number;
  
  GLOBAL_DATE_CURRENT       : number;
  GLOBAL_DATE_DAY_STRING    : string; 
  GLOBAL_MAIN_WINDOW        : number;
  
  sUC                       : string;
  sTemp                     : string;

  currentSection : string init "BeforeStart";

dclfunc
  
//################################################################## 
// CustomInitialization
//##################################################################
function CustomInitialization
	begin

		sUC := GetScriptName(FILENAME_SIMPLE);

		//-----------------------------
		// Errors
		// Note: exclude these for scripting than the Try Script will not stop
		ErrorAdd(FACILITY_BROWSERENGINE,25,SEVERITY_TRANS_EXIT);
		ErrorAdd(FACILITY_BROWSERENGINE,29,SEVERITY_TRANS_EXIT);

		//-----------------------------
		// Date 
		GLOBAL_DATE_CURRENT   := GetCurrentDate();
		GLOBAL_DATE_DAY_STRING := FormatDate(GLOBAL_DATE_CURRENT, "%d" );

		//remove leading zero 
		if StrSearch(GLOBAL_DATE_DAY_STRING, "0", STR_SEARCH_FIRST) = 1 then
		   Substr(GLOBAL_DATE_DAY_STRING, sTemp, 2, 1); 
		   GLOBAL_DATE_DAY_STRING := sTemp;
		end;

		//-----------------------------
		// Browser
		BrowserStart(BROWSER_MODE_DEFAULT, 1280, 768);
		BrowserSetReplayBehavior(SP_15_5);

		GLOBAL_MAIN_WINDOW := BrowserGetActiveWindow("wnd1");

		//-----------------------------
		// Various
		SetEncoding("UTF-8");
		MeasureCalculateRawPercentiles(NULL, MEASURE_TIMER_RESPONSETIME, false, OPT_PERCENTILES_GRANULARITY_1_PER_MIL);
	
	end CustomInitialization;

//################################################################## 
// CustomSection
//##################################################################
function CustomSection(sectionName : string)
	begin
		TrueLogSection(sectionName);
		currentSection := sectionName;

		if DEV_MODE then print("[CustomUtils] Start Section: '"+sectionName); end;
			
	end CustomSection;

//################################################################## 
// CustomStart
//##################################################################
function CustomStart(timerName : string)
	begin

		CustomSection(timerName);
		MeasureStart(timerName);    

	end CustomStart;

//################################################################## 
// CustomStop
//##################################################################
function CustomStop(timerName : string; bIgnoreOnError : boolean optional := true)
	begin

		MeasureStop(timerName, bIgnoreOnError);   
		CustomSection("after_"+currentSection);
		
	end CustomStop;


//################################################################## 
// CustomOpenUserFile
//##################################################################
function CustomOpenUserFile(sFilename : string)
begin

FileCSVLoadGlobal(GLOBAL_USER_FILE_HANDLE, sFilename);

if VERBOSE then print("[CustomUtils] Loading user File: "+sFilename); end;

end CustomOpenUserFile;

//################################################################## 
// CustomGetNextUser
//##################################################################
function CustomGetNextUser
var

begin

FileGetNextUniqueRow(GLOBAL_USER_FILE_HANDLE);
GLOBAL_USER_ID := FileGetCol(GLOBAL_USER_FILE_HANDLE, 1);
GLOBAL_USER_PW := FileGetCol(GLOBAL_USER_FILE_HANDLE, 2);

if VERBOSE then print("[CustomUtils] User: CustomGetNextUser - User: "+GLOBAL_USER_ID+";Password: "+GLOBAL_USER_PW); end;

end CustomGetNextUser;

//################################################################## 
// CustomGetRandomUser
//##################################################################
function CustomGetRandomUser
var

begin

FileGetRndRow(GLOBAL_USER_FILE_HANDLE);
GLOBAL_USER_ID := FileGetCol(GLOBAL_USER_FILE_HANDLE, 1);
GLOBAL_USER_PW := FileGetCol(GLOBAL_USER_FILE_HANDLE, 2);

if VERBOSE then print("[CustomUtils] User: CustomGetRandomUser - User: "+GLOBAL_USER_ID+";Password: "+GLOBAL_USER_PW); end;

end CustomGetRandomUser;


//################################################################## 
// CustomPrintEverywhere
//##################################################################
function CustomPrintEverywhere(message : string)
begin

RepMessage(message, SEVERITY_INFORMATIONAL);
print(message);
writeln(message);

end CustomPrintEverywhere;

//################################################################## 
// CustomGetRandomElement
// ----------------------
// Returns the handle of a random element of the elements which 
// get matched by the given locator.
//##################################################################
function CustomGetRandomElement(sLocator : string; timeout : number optional := 60000) : number 
var
  resultList: list of number;
  randomIndex : number;
  randomHandle : number;
begin

  BrowserFindAll(HANDLE_DESKTOP, sLocator, resultList, timeout);
  randomIndex := RndUniN(1..ListGetLength(resultList)); 
  ListGetAt(resultList, randomIndex, randomHandle);
  if VERBOSE then print("[CustomUtils] CustomGetRandomElement - total:"+ListGetLength(resultList)+", index: "+randomIndex+", handle:"+randomHandle); end;
  CustomGetRandomElement := randomHandle;
  
end CustomGetRandomElement;
  
//#########################################################################
// CustomGetTimeStamp
//#########################################################################   
function CustomGetTimestamp : string

  var 
    nDateLocal, nTimeLocal : number;
    sDateLocal : string;
  begin
    
    nDateLocal := GetCurrentDate();
    nTimeLocal := GetCurrentTime();

	//Note: FormatDateTime will crash the process when the format string is incorrect
    FormatDateTime(nDateLocal, nTimeLocal, "%d-%m-%YT%H%M%S", sDateLocal);  
    CustomGetTimestamp := sDateLocal;
    
  end CustomGetTimestamp;

//################################################################## 
// CustomWaitForAppear
// Waits until the dom element appears.
//##################################################################
function CustomWaitForAppear(locator : string; durationMS : number; failOnError : boolean optional)
var
  starttime : number;
  hasAppeared : boolean; 
  elementList : list of number;
begin
  
  starttime := number(GetTimeStamp(TIMESTAMP_IN_MS));
  
  hasAppeared := false;
  while ( not hasAppeared and (number(GetTimeStamp(TIMESTAMP_IN_MS)) - starttime) < durationMS) do
    hasAppeared := BrowserFindAll(HANDLE_DESKTOP, locator, elementList, 500);
  end;
  
  CustomWaitForAppear := hasAppeared;
	
end CustomWaitForAppear;

//################################################################## 
// CustomWaitForAppear 
// Waits until the dom element appears.
//##################################################################
function CustomWaitForAppear( locator        : string;
                              timeout        : number optional := 60000) : boolean
var
  isFound       : boolean;
  totalTime     : number;
  interval      : number;
begin
  
  interval := 500; 
  totalTime := 0;
  isFound := false;
  
  
  //----------------------------------------
  //Check in loop until timeout 
  //----------------------------------------
  while (not isFound and (totalTime < timeout) ) do 
    
    ErrorAdd(FACILITY_BROWSERENGINE,25,SEVERITY_INFORMATIONAL);
      ErrorAdd(FACILITY_BROWSERENGINE,29,SEVERITY_INFORMATIONAL);

        isFound := BrowserWaitForProperty(locator, "disabled", false, interval);
        
      ErrorRemove(FACILITY_BROWSERENGINE,29);   
    ErrorRemove(FACILITY_BROWSERENGINE,25);
    
    if(not isFound) then
      totalTime  := totalTime + interval;
      wait float(interval / 1000);
    else 
      exit;
    end; 
    
  end; 
  
  //----------------------------------------
  //Check Result
  //----------------------------------------
  if not isFound then
 
    RaiseError(CUSTOM_ERROR,"CustomWaitForAppear did not found the specified locator: '"+locator+"'", SEVERITY_ERROR);
    
  end;
  
  CustomWaitForAppear := isFound;
      
end CustomWaitForAppear;


//##################################################################
// CustomWaitForAppear
// Waits until the dom element appears.
// locator     "//input[@name='accountSearchForm:ac*']"
// nSeverity    Optional: Severity of the error that is raised if the verification fails. NULL or : 
/*
    SEVERITY_SUCCESS: Success; no error (numerical value: 0) 
    SEVERITY_INFORMATIONAL: Informational; no error (numerical value: 1) 
    SEVERITY_WARNING: Warning; no error (numerical value: 2) 
    SEVERITY_ERROR: (Default) Error; simulation continues (numerical value: 3) 
    SEVERITY_TRANS_EXIT: Error; the active transaction is aborted (numerical value: 4) 
    SEVERITY_PROCESS_EXIT: Error; the simulation is aborted (numerical value: 5) 
*/
//##################################################################

function CustomWaitForAppear(locator : string; durationMS : number; nSeverity : number optional) : boolean
  var
    starttime   : number;
    hasAppeared : boolean;
    elementList : list of number;

  begin

    starttime := GetTickCount();

    print(string(starttime));

    hasAppeared := false;   

    while ((not hasAppeared) and ((GetTickCount() - starttime) < durationMS)) do

      print(GetTimeStamp(TIMESTAMP_IN_MS));
      print("hasAppeared "+ string(hasAppeared) + " "+ String(GetTickCount() - starttime) );      
      hasAppeared := BrowserFindAll(HANDLE_DESKTOP, locator, elementList, 500);

    end;

    if Not hasAppeared Then
      if nSeverity <> NULL then 

        RepMessage("Can't find Locator |"+locator+"|", nSeverity);

      end;
    end ;  

    CustomWaitForAppear := hasAppeared; 

  end CustomWaitForAppear;
  
  //##################################################################
// LocatorWaitForAppear
// Waits until the dom element appears.
// locator     "//input[@name='accountSearchForm:ac*']"
// nSeverity    Optional: Severity of the error that is raised if the verification fails. NULL or : 
/*
    SEVERITY_SUCCESS: Success; no error (numerical value: 0) 
    SEVERITY_INFORMATIONAL: Informational; no error (numerical value: 1) 
    SEVERITY_WARNING: Warning; no error (numerical value: 2) 
    SEVERITY_ERROR: (Default) Error; simulation continues (numerical value: 3) 
    SEVERITY_TRANS_EXIT: Error; the active transaction is aborted (numerical value: 4) 
    SEVERITY_PROCESS_EXIT: Error; the simulation is aborted (numerical value: 5) 
*/
//##################################################################
  function LocatorWaitForAppear(StartLocator: number; SearchLocator : string; durationMS : number; nSeverity : number optional) : number 
  var
    starttime   : number;
    hasAppeared : number;
  begin
  
    starttime := GetTickCount();
    hasAppeared := HANDLE_INVALID;
	
    while ((hasAppeared = HANDLE_INVALID) and ((GetTickCount() - starttime) < durationMS)) do
      hasAppeared := BrowserFind(StartLocator, SearchLocator, TRUE, 10, TRUE);
    end;
	
    if hasAppeared = HANDLE_INVALID Then
      if nSeverity <> NULL then 
        RepMessage("Can't find Locator |"+SearchLocator+"|", nSeverity);
      end;
    end ;
	
    LocatorWaitForAppear := hasAppeared;
  end LocatorWaitForAppear;



  
//#########################################################################
//
//######################################################################### 
function CustomSetBreakpoint
  begin
    RaiseError(CUSTOM_MESSAGE, "Breakpoint for debugging", SEVERITY_WARNING);
  end CustomSetBreakpoint;

//#########################################################################
// CustomJSTriggerOnChange
// =====================
// @cssSelector a css selector string >> https://www.w3schools.com/cssref/css_selectors.asp
//
//######################################################################### 
function CustomJSTriggerOnChange(cssSelector: string)
  var
    javascript : string;
    eventCode : string;
    
  begin
    
    eventCode := "  if(document.fireEvent) {\n"
                 "    document.getElementById('myElement').fireEvent('onchange');\n"
                 "  } else {\n"
                 "    var event = document.createEvent('HTMLEvents');\n"
                 "    event.initEvent('change',true,false);\n"
                 "    element.dispatchEvent(event);\n"
                 "  }\n";

    
    javascript := "var element = document.querySelector(\""+cssSelector+"\");\n"
                  "if(element != null){\n"
                     +eventCode+
                  "}else{\n"
                  "  console.warn('[ERROR] Silkperformer - CustomTriggerJSEvent(): no match found for cssSelector.');\n"
                  "}\n";

    BrowserExecuteJavaScript(javascript);

  end CustomJSTriggerOnChange;

//#########################################################################
// CustomJQuerySetAttribute
// ========================
// @cssSelector a css selector string >> https://www.w3schools.com/cssref/css_selectors.asp
//
//######################################################################### 
function CustomJQuerySetAttribute(cssSelector: string; key : string; value : string)
  var
    javascript : string;
      
  begin
    
    javascript := "$(\""+cssSelector+"\").attr('"+key+"', '"+value+"');\n";

    BrowserExecuteJavaScript(javascript);

  end CustomJQuerySetAttribute;
  
//#########################################################################
// CustomJQueryTriggerEvent
// ========================
// @cssSelector a css selector string >> https://www.w3schools.com/cssref/css_selectors.asp
//
//######################################################################### 
function CustomJQueryTriggerEvent(cssSelector: string; eventName : string)
  var
    javascript : string;
    
  begin
    
    javascript := "$(\""+cssSelector+"\").trigger('"+eventName+"');\n";

    BrowserExecuteJavaScript(javascript);

  end CustomJQueryTriggerEvent;
  
//#########################################################################
// CustomJSTriggerEvent
// ====================
// Triggers the event method of the node represented by the css selector.
// Throws an "Object expected (line 3)" when the selected event method is 
// not defined for the object.
// 
// @cssSelector a css selector string >> https://www.w3schools.com/cssref/css_selectors.asp
// @param event something like "onchange", "onkeyup", "onclick" etc...
//
//######################################################################### 
function CustomJSTriggerEvent(cssSelector: string; eventMethod : string)
  var
    javascript : string;
    
  begin
        
    javascript := "var element = document.querySelector(\""+cssSelector+"\");\n"
                  "if(element != null){\n"
                  "  element."+eventMethod+"()\n"
                  "}else{\n"
                  "  console.warn('[ERROR] Silkperformer - CustomTriggerJSEvent(): no match found for cssSelector.');\n"
                  "}\n";

    BrowserExecuteJavaScript(javascript);


  end CustomJSTriggerEvent;
  
  
  //================================================================
  // Log a line with timestamp and the values you have defined 
  // separated with comma.
  // 
  // Example:
  //   2017-07-17T07:07:07, [logType], LogName, logMessage
  //   2017-07-17T07:07:07, [ITEMCOUNT], Click_MenuItem_HugeList_rowCount_11-20, 2.675000ms
  //================================================================
  function Log(logType : string; 
               logName : string; 
               logMessage : string)  
    var 
       logLine : string;
       formattedDate : string;
    begin

      FormatDateTime(GetCurrentDate(), GetCurrentTime(), "%Y-%m-%dT%H:%M:%S", formattedDate);

      logLine := logLine + formattedDate;
      logLine := logLine + ", " + "[" + logType + "]"; 
      logLine := logLine + ", " + logName;  
      logLine := logLine + ", " + logMessage;   
      
        writeln(logLine);
    end;         
  
  //================================================================
  // Logs the duration for the specified count.
  // This will consider the number of items found by the locator and
  // appends an exponential range to the actionName.
  // This will be shown in the report as an action of it's own.
  // 
  // - actionName: The name of the action which the duration should 
  //               be taken from. (e.g. "Click_MenuItem_HugeList")
  //
  // - countName:  The name for the count, you can do multiple counts
  //               on the same action. (e.g. "rowCount")
  //
  // - locator:    The locator of the elements which should be 
  //               counted. (e.g. "//tr")
  //
  // - initRange:  The initial range of the exponential ranges.
  //               (e.g '5' will result in "1-5", "6-10", "11-20" ...)
  //
  // Output Example:
  //   2017-07-17T07:07:07, [ITEMCOUNT], Click_MenuItem_HugeList_rowCount_11-20, 2.675000ms
  //   2017-07-17T08:08:08, [ITEMCOUNT], Click_MenuItem_HugeList_rowCount_1-5, 0.777000ms
  //   2017-07-17T09:09:09, [ITEMCOUNT], Click_MenuItem_HugeList_rowCount_6-10, 0.999000ms
  //   ...
  //
  //================================================================
  function LogDurationByCount(actionName : string; 
                        countName : string; 
                        count : number; 
                        initRange : number )
    var
      logName : string;
      lowerBound : number;
      upperBound : number;
      duration : float;
    begin
      lowerBound := 1;
      upperBound := initRange;
      logName := actionName + "_" + countName;
      
      MeasureGet(actionName, MEASURE_TIMER_RESPONSETIME, MEASURE_KIND_LAST, duration);

      
      if(count = 0) then
        logName := logName + "_0";
      
      else
        
        while(upperBound < count) do
          lowerBound := upperBound + 1;
          upperBound := upperBound * 2;
        
        end;
        
        logName := logName + "_"+ string(lowerBound) + "-" + string(upperBound);
      
      end;
      
      Log("ITEMCOUNT", logName, "Count: "+count+", Duration: "+duration);
      
    end LogDurationByCount; 

  
  //================================================================
  // Adds a measure the specified action with an item count.
  // This will take the count set by the parameter and
  // appends an exponential range to the actionName.
  // This will be shown in the report as an action of it's own.
  // 
  // - actionName: The name of the action which the duration should 
  //               be taken from. (e.g. "Click_MenuItem_HugeList")
  //
  // - countName:  The name for the count, you can do multiple counts
  //               on the same action. (e.g. "rowCount")
  //
  // - count:      The count that should be saved
  //
  // - initRange:  The initial range of the exponential ranges.
  //               (e.g '5' will result in "1-5", "6-10", "11-20" ...)
  //
  // Action Name Examples:
  //   Click_MenuItem_HugeList_rowCount_11-20
  //   Click_MenuItem_HugeList_rowCount_1-5
  //   Click_MenuItem_HugeList_rowCount_6-10
  //
  //================================================================
  function MeasureTimeByCount(actionName : string; 
                        countName : string; 
                        count : number; 
                        initRange : number )
    var
      logName : string;
      lowerBound : number;
      upperBound : number;
      duration : float;
    begin
      lowerBound := 1;
      upperBound := initRange;
      logName := actionName + "_" + countName;
      
      MeasureGet(actionName, MEASURE_TIMER_RESPONSETIME, MEASURE_KIND_LAST, duration);

      
      if(count = 0) then
        logName := logName + "_0";
      
      else
        
        while(upperBound < count) do
          lowerBound := upperBound + 1;
          upperBound := upperBound * 2;
        
        end;
        
        logName := logName + "_"+ string(lowerBound) + "-" + string(upperBound);
      
      end;
      
      MeasureSetFloat(logName, MEASURE_TIMER_RESPONSETIME, duration * 1000.0);
      
    end MeasureTimeByCount; 
  
  //================================================================
  // Click the element if it could be found, else do nothing.
  //================================================================
  function ClickIfVisible(locator : string; actionName : string)  
    var
      handleList : list of number;
      elementsFound : boolean;
    begin
      elementsFound := BrowserFindAll(HANDLE_DESKTOP, locator, handleList);
  
      //handle := BrowserFind(HANDLE_DESKTOP, locator, FALSE, BROWSER_OPT_WAIT_TIMEOUT, TRUE);
      if(elementsFound) then
        BrowserClick(locator, BUTTON_Left, actionName);
      end;
      
    end ClickIfVisible;
  
  //================================================================
  // Get the count of elements found with the specified locator.
  //================================================================
  function GetElementCount(locator : string): number
    var
      handleList : list of number;
      elementsFound : boolean;
    begin
      elementsFound := BrowserFindAll(HANDLE_DESKTOP, locator, handleList);
  
      //DEBUG: writeln("NumberOfListElements:" + elementsFound + ", "+ ListGetLength(handleList));
      GetElementCount := ListGetLength(handleList);
      
    end GetElementCount; 
 
  
  //================================================================
  // Adds a measure the specified action with an item count.
  // This will consider the number of items found by the locator and
  // appends an exponential range to the actionName.
  // This will be shown in the report as an action of it's own.
  // 
  // - actionName: The name of the action which the duration should 
  //               be taken from. (e.g. "Click_MenuItem_HugeList")
  //
  // - countName:  The name for the count, you can do multiple counts
  //               on the same action. (e.g. "rowCount")
  //
  // - locator:    The locator of the elements which should be 
  //               counted. (e.g. "//tr")
  //
  // - initRange:  The initial range of the exponential ranges.
  //               (e.g '5' will result in "1-5", "6-10", "11-20" ...)
  //
  // Action Name Examples:
  //   Click_MenuItem_HugeList_rowCount_11-20
  //   Click_MenuItem_HugeList_rowCount_1-5
  //   Click_MenuItem_HugeList_rowCount_6-10
  //
  //================================================================
    function MeasureTimeByLocatorCount(actionName : string; 
                        countName : string; 
                        locator : string; 
                        initRange : number )
    var
      logName : string;
      lowerBound : number;
      upperBound : number;
      count : number;
      duration : float;
    begin
      lowerBound := 1;
      upperBound := initRange;
      logName := actionName + "_" + countName;
      count := GetElementCount(locator);
      
      MeasureGet(actionName, MEASURE_PAGE_ACTIONTIME, MEASURE_KIND_LAST, duration);

      
      if(count = 0) then
        logName := logName + "_0";
      
      else
        
        while(lowerBound < count) do
          lowerBound := upperBound + 1;
          upperBound := upperBound * 2;
        
        end;
        
        logName := logName + "_"+ string(lowerBound) + "-" + string(upperBound);
      
      end;
      
      MeasureSetFloat(logName, MEASURE_PAGE_ACTIONTIME, duration * 1000.0);
      
    end MeasureTimeByLocatorCount; 
    